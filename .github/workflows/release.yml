name: release-module-zip

on:
  push:
    tags: ['v*']

jobs:
  build-and-release:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Locate psd1 and verify version == tag
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'

          $tag = "${{ github.ref_name }}".TrimStart('v')
          $psd1Item = Get-ChildItem -Recurse -Filter 'Koronet-Axerrio.GitTools.psd1' | Select-Object -First 1
          if (-not $psd1Item) { throw "psd1 not found anywhere in repo" }

          $psd1 = $psd1Item.FullName
          $manifest = Test-ModuleManifest $psd1
          $modVer = $manifest.ModuleVersion.ToString()

          "Tag: v$tag"
          "ModuleVersion: $modVer"
          if ($modVer -ne $tag) {
            throw "ModuleVersion ($modVer) does not match tag v$tag. Update the psd1 before tagging."
          }

          "PSD1_PATH=$psd1" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Build ZIP (stage module folder if needed)
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'

          $psd1 = "${{ env.PSD1_PATH }}"
          $moduleName = 'Koronet-Axerrio.GitTools'
          $zipName    = "$moduleName-${{ github.ref_name }}.zip"

          $moduleRoot = Split-Path -Parent $psd1
          $leaf = Split-Path -Leaf $moduleRoot

          if ($leaf -ne $moduleName) {
            # Create a staging folder named exactly like the module
            $stage = Join-Path $env:RUNNER_TEMP $moduleName
            if (Test-Path $stage) { Remove-Item $stage -Recurse -Force }
            New-Item -ItemType Directory -Path $stage |
