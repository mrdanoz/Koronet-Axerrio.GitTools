name: release-module-zip

on:
  push:
    tags: ['v*']
  workflow_dispatch: {}

jobs:
  build-and-release:
    runs-on: windows-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Locate psd1 and read version
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $psd1Item = Get-ChildItem -Recurse -File -Filter 'Koronet-Axerrio.GitTools.psd1' | Select-Object -First 1
          if (-not $psd1Item) { throw "psd1 not found anywhere in repo" }
          $psd1 = $psd1Item.FullName
          $data = Import-PowerShellDataFile -Path $psd1
          if (-not $data -or -not $data.ModuleVersion) { throw "ModuleVersion missing in $psd1" }
          "PSD1_PATH=$psd1"                | Out-File -FilePath $env:GITHUB_ENV -Append
          "MOD_VER=$($data.ModuleVersion)" | Out-File -FilePath $env:GITHUB_ENV -Append
          if ($data.RootModule -and ($data.RootModule -notmatch '^[^\\/]+\.psm1$')) {
            Write-Warning "RootModule should be just the file name (e.g., Koronet-Axerrio.GitTools.psm1). Current: '$($data.RootModule)'."
          }

      - name: Enforce tag matches ModuleVersion
        if: ${{ startsWith(github.ref, 'refs/tags/') }}
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $tag = "${{ github.ref_name }}".TrimStart('v')
          if ("${{ env.MOD_VER }}" -ne $tag) {
            throw "ModuleVersion ($env:MOD_VER) does not match tag v$tag"
          }

      - name: Build ZIP
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $moduleName = 'Koronet-Axerrio.GitTools'
          $psd1 = "${{ env.PSD1_PATH }}"
          $zipName = if ($env:GITHUB_REF_NAME) { "$moduleName-${{ github.ref_name }}.zip" } else { "$moduleName-manual.zip" }
          $moduleRoot = Split-Path -Parent $psd1
          $leaf = Split-Path -Leaf $moduleRoot
          if ($leaf -ne $moduleName) {
            $stage = Join-Path $env:RUNNER_TEMP $moduleName
            if (Test-Path $stage) { Remove-Item $stage -Recurse -Force }
            New-Item -ItemType Directory -Path $stage | Out-Null
            Copy-Item (Join-Path $moduleRoot "$moduleName.psd1") $stage -Force
            Copy-Item (Join-Path $moduleRoot "$moduleName.psm1") $stage -Force
            foreach ($sub in 'Public','Private','config','tools') {
              $p = Join-Path $moduleRoot $sub
              if (Test-Path $p) { Copy-Item $p $stage -Recurse -Force }
            }
            $pathToZip = $stage
          } else {
            $pathToZip = $moduleRoot
          }
          if (Test-Path $zipName) { Remove-Item $zipName -Force }
          Compress-Archive -Path $pathToZip -DestinationPath $zipName -Force
          "ZIP_PATH=$zipName" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Ensure bootstrap exists
        shell: pwsh
        run: |
          if (-not (Test-Path 'tools/KXGT-Bootstrap.ps1')) { throw "Bootstrap script not found at tools/KXGT-Bootstrap.ps1" }
          "BOOTSTRAP_PATH=tools/KXGT-Bootstrap.ps1" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Create GitHub Release (attach ZIP + Bootstrap)
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ${{ env.ZIP_PATH }}
            ${{ env.BOOTSTRAP_PATH }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
